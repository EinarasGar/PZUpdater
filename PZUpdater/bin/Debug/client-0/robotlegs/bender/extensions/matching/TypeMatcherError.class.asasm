class
 refid "robotlegs.bender.extensions.matching:TypeMatcherError"
 instance QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcherError")
  extends QName(PackageNamespace(""), "Error")
  flag SEALED
  flag PROTECTEDNS
  protectedns ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcherError")
  iinit
   refid "robotlegs.bender.extensions.matching:TypeMatcherError/instance/init"
   param QName(PackageNamespace(""), "String")
   body
    maxstack 2
    localcount 2
    initscopedepth 5
    maxscopedepth 6
    code
     getlocal0
     pushscope

     getlocal0
     getlocal1
     constructsuper      1

     returnvoid
    end ; code
   end ; body
  end ; method
 end ; instance
 cinit
  refid "robotlegs.bender.extensions.matching:TypeMatcherError/class/init"
  body
   maxstack 2
   localcount 1
   initscopedepth 4
   maxscopedepth 5
   code
    getlocal0
    pushscope

    findproperty        QName(PackageNamespace(""), "EMPTY_MATCHER")
    pushstring          "An empty matcher will create a filter which matches nothing. You should specify at least one condition for the filter."
    initproperty        QName(PackageNamespace(""), "EMPTY_MATCHER")

    returnvoid
   end ; code
  end ; body
 end ; method
 trait const QName(PackageNamespace(""), "EMPTY_MATCHER") slotid 1 type QName(PackageNamespace(""), "String") value Utf8("An empty matcher will create a filter which matches nothing. You should specify at least one condition for the filter.") end
end ; class
